# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_vbwSC', [dirname(__file__)])
        except ImportError:
            import _vbwSC
            return _vbwSC
        if fp is not None:
            try:
                _mod = imp.load_module('_vbwSC', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _vbwSC = swig_import_helper()
    del swig_import_helper
else:
    import _vbwSC
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class block(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, block, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, block, name)
    __repr__ = _swig_repr
    __swig_setmethods__["size"] = _vbwSC.block_size_set
    __swig_getmethods__["size"] = _vbwSC.block_size_get
    if _newclass:
        size = _swig_property(_vbwSC.block_size_get, _vbwSC.block_size_set)
    __swig_setmethods__["alphas"] = _vbwSC.block_alphas_set
    __swig_getmethods__["alphas"] = _vbwSC.block_alphas_get
    if _newclass:
        alphas = _swig_property(_vbwSC.block_alphas_get, _vbwSC.block_alphas_set)
    __swig_setmethods__["saxsExpPtr"] = _vbwSC.block_saxsExpPtr_set
    __swig_getmethods__["saxsExpPtr"] = _vbwSC.block_saxsExpPtr_get
    if _newclass:
        saxsExpPtr = _swig_property(_vbwSC.block_saxsExpPtr_get, _vbwSC.block_saxsExpPtr_set)
    __swig_setmethods__["saxsErrPtr"] = _vbwSC.block_saxsErrPtr_set
    __swig_getmethods__["saxsErrPtr"] = _vbwSC.block_saxsErrPtr_get
    if _newclass:
        saxsErrPtr = _swig_property(_vbwSC.block_saxsErrPtr_get, _vbwSC.block_saxsErrPtr_set)
    __swig_setmethods__["saxsEnsPtr"] = _vbwSC.block_saxsEnsPtr_set
    __swig_getmethods__["saxsEnsPtr"] = _vbwSC.block_saxsEnsPtr_get
    if _newclass:
        saxsEnsPtr = _swig_property(_vbwSC.block_saxsEnsPtr_get, _vbwSC.block_saxsEnsPtr_set)
    __swig_setmethods__["saxsPrePtr"] = _vbwSC.block_saxsPrePtr_set
    __swig_getmethods__["saxsPrePtr"] = _vbwSC.block_saxsPrePtr_get
    if _newclass:
        saxsPrePtr = _swig_property(_vbwSC.block_saxsPrePtr_get, _vbwSC.block_saxsPrePtr_set)
    __swig_setmethods__["saxsMixPtr"] = _vbwSC.block_saxsMixPtr_set
    __swig_getmethods__["saxsMixPtr"] = _vbwSC.block_saxsMixPtr_get
    if _newclass:
        saxsMixPtr = _swig_property(_vbwSC.block_saxsMixPtr_get, _vbwSC.block_saxsMixPtr_set)
    __swig_setmethods__["saxsScale"] = _vbwSC.block_saxsScale_set
    __swig_getmethods__["saxsScale"] = _vbwSC.block_saxsScale_get
    if _newclass:
        saxsScale = _swig_property(_vbwSC.block_saxsScale_get, _vbwSC.block_saxsScale_set)
    __swig_setmethods__["numberProcs"] = _vbwSC.block_numberProcs_set
    __swig_getmethods__["numberProcs"] = _vbwSC.block_numberProcs_get
    if _newclass:
        numberProcs = _swig_property(_vbwSC.block_numberProcs_get, _vbwSC.block_numberProcs_set)

    def __init__(self):
        this = _vbwSC.new_block()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _vbwSC.delete_block
    __del__ = lambda self: None
block_swigregister = _vbwSC.block_swigregister
block_swigregister(block)


def block_alloc(n):
    return _vbwSC.block_alloc(n)
block_alloc = _vbwSC.block_alloc

def block_free(t):
    return _vbwSC.block_free(t)
block_free = _vbwSC.block_free

def block_copy(inp, outp):
    return _vbwSC.block_copy(inp, outp)
block_copy = _vbwSC.block_copy

def block_copy_construct(xp):
    return _vbwSC.block_copy_construct(xp)
block_copy_construct = _vbwSC.block_copy_construct

def block_destroy(xp):
    return _vbwSC.block_destroy(xp)
block_destroy = _vbwSC.block_destroy

def ientropy(w, k):
    return _vbwSC.ientropy(w, k)
ientropy = _vbwSC.ientropy

def jensen_shannon_div(w_a, w_b, k):
    return _vbwSC.jensen_shannon_div(w_a, w_b, k)
jensen_shannon_div = _vbwSC.jensen_shannon_div

def find_square_root(w_ens, w_ens1, ct, ct_prim, k):
    return _vbwSC.find_square_root(w_ens, w_ens1, ct, ct_prim, k)
find_square_root = _vbwSC.find_square_root

def SaxsScaleMean(saxs_ens, saxs_exp, err_saxs, N):
    return _vbwSC.SaxsScaleMean(saxs_ens, saxs_exp, err_saxs, N)
SaxsScaleMean = _vbwSC.SaxsScaleMean

def SaxsScaleStandardDeviation(saxs_ens, saxs_exp, err_saxs, N, T):
    return _vbwSC.SaxsScaleStandardDeviation(saxs_ens, saxs_exp, err_saxs, N, T)
SaxsScaleStandardDeviation = _vbwSC.SaxsScaleStandardDeviation

def L_function(xp):
    return _vbwSC.L_function(xp)
L_function = _vbwSC.L_function

def L_distance(xp, yp):
    return _vbwSC.L_distance(xp, yp)
L_distance = _vbwSC.L_distance

def L_print(xp):
    return _vbwSC.L_print(xp)
L_print = _vbwSC.L_print

def L_take_step(r, xp, step_size):
    return _vbwSC.L_take_step(r, xp, step_size)
L_take_step = _vbwSC.L_take_step

def run_vbw(again, k, mdfile, N, presaxsfile, Ncurves, curvesfile, outfile, nprocs, w_cut, skip_vbw):
    return _vbwSC.run_vbw(again, k, mdfile, N, presaxsfile, Ncurves, curvesfile, outfile, nprocs, w_cut, skip_vbw)
run_vbw = _vbwSC.run_vbw
# This file is compatible with both classic and new-style classes.


